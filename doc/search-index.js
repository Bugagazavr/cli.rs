var searchIndex = {};
searchIndex['cli'] = {"items":[[0,"","cli","A toolkit for building Unix command-line programs in Rust."],[5,"exec_path","","The file path of the executed program."],[5,"usage_string","","Construct a canonical usage string from a collection of `Options`."],[5,"version_string","","Construct a version string."],[5,"parse_args","","Parse the command-line arguments with which the program was executed\naccording to a collection of `Options`."],[5,"helpopt","","Add a help flag to `Options`."],[5,"versionopt","","Add a version flag to `Options`."],[0,"sysexits","","A collection of predefined exit codes cribbed from\n[sysexits.h](http://www.freebsd.org/cgi/man.cgi?query=sysexits)."],[17,"OK","cli::sysexits","Successful termination"],[17,"USAGE","","Command line usage error"],[17,"DATA_ERR","","Data format error"],[17,"NO_INPUT","","Cannot open input"],[17,"NO_USER","","Addressee unknown"],[17,"NO_HOST","","Host name unknown"],[17,"UNAVAILABLE","","Service unavailable"],[17,"SOFTWARE_ERR","","Internal software error"],[17,"OS_ERR","","System error (e.g. can't fork)"],[17,"OS_FILE","","Critical OS file missing"],[17,"CANT_CREAT","","Can't create (user) output file"],[17,"IO_ERR","","Input/output error"],[17,"TEMP_FAIL","","Temp failure; user is invited to retry"],[17,"PROTOCOL","","Remote error in protocol"],[17,"NO_PERM","","Permission denied"],[17,"CONFIG","","Configuration error"]],"paths":[]};
searchIndex['getopts'] = {"items":[[0,"","getopts","Simple getopt alternative."],[3,"Options","","A description of the options that a program can handle"],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings."],[12,"free","","Free string fragments",0],[4,"HasArg","","Describes whether an option has an argument."],[13,"Yes","","The option requires an argument.",1],[13,"No","","The option takes no argument.",1],[13,"Maybe","","The option argument is optional.",1],[4,"Occur","","Describes how often an option may occur."],[13,"Req","","The option occurs once.",2],[13,"Optional","","The option occurs at most once.",2],[13,"Multi","","The option occurs zero or more times.",2],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Show` implementation to output detailed\ninformation."],[13,"ArgumentMissing","","The option requires an argument but none was passed.",3],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",3],[13,"OptionMissing","","A required option is not present.",3],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",3],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",3],[4,"FailType","","The type of failure that occurred."],[13,"ArgumentMissing_","","",4],[13,"UnrecognizedOption_","","",4],[13,"OptionMissing_","","",4],[13,"OptionDuplicated_","","",4],[13,"UnexpectedArgument_","","",4],[6,"Result","","The result of parsing a command line with a set of options."],[11,"new","","Create a blank set of options",5],[11,"opt","","Create a generic option group, stating all parameters explicitly",5],[11,"optflag","","Create a long option that is optional and does not take an argument.",5],[11,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",5],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",5],[11,"optopt","","Create a long option that is optional and takes an argument.",5],[11,"reqopt","","Create a long option that is required and takes an argument.",5],[11,"parse","","Parse command line arguments according to the provided options.",5],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5],[11,"usage","","Derive a usage message from a set of long options.",5],[11,"eq","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"eq","","",2],[11,"ne","","",2],[11,"clone","","",2],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"fmt","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"eq","","",4],[11,"ne","","",4],[11,"opt_present","","Returns true if an option was matched.",0],[11,"opt_count","","Returns the number of times an option was matched.",0],[11,"opts_present","","Returns true if any of several options were matched.",0],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",0],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0],[11,"opt_default","","Returns the matching string, a default, or none.",0],[11,"to_err_msg","","Convert a `Fail` enum into an error string.",3],[11,"fmt","","",3]],"paths":[[3,"Matches"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};

initSearch(searchIndex);
